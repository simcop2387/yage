
[Might Be Planned]
Java bindings?
Scripting language? (Lua)
Physics based skeletal-animation AI?




[Not Planned]
Morpth Target animations (Quake 2 style)
Bump/Parallax/etc--These can be implemented via shaders.
Water Node--Again, via materials/shaders
Shadow Volumes--Shadow maps will suffice.
DirectX Support--OpenGL will suffice.






A miscellaneous listing:

[Node]
 + BSP (obsoleted by H. occlusion?)
 + Camera
 + Cloud
 + Fog
 + Label
 + Light
 + Model (lod?)
 + Particle
 + Physics
 + Scene
 + Sound
 + SoundOcclusion
 + Sprite
 + Terrain
 + Zone (defines an area with different scene variables)

 
[Texture]
Textures will be able to have one of three sources of input,
an image file, a video file, or output from a camera

[Materials]
Things to consider:
	Environment Maps
	Environment Masks
	Detail Maps
	Light Maps
	Emissive Maps ...aka lightmap?
	Bump Maps
	Parallax Maps
	Animated Textures  

	UV Pan
	Layers
	Day / Night planet effect
	Glass
	Heat
	Shadow integration?

"Programmers that wish to extend the capabilities of the shader 
editor may do so by adding 'shader modules'. These are small, 
simple to create XML files which define the behavior of the 
shader nodes."
 
[Scene]
A scene will have a default root node of which all other nodes
are children.  Functionality like setSkybox(mesh), etc.

[SceneManager]
[ModelManager]
[TextureManager]

[Device]
Class for core windowing operations, not sure what else yet


[3d Math Library]
  Vector
  Matrix
  Quaternion
  Line
  Plane
  Box

[Other Features]
Vertex Shader Animation
Dnynamic Shadows
Hardware Occlusion
Post Processing (HDR, Motion Blur)
Decals?

Sound
Networking
Physics